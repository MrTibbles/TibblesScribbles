// Generated by CoffeeScript 1.6.3
(function() {
  var AppEvents, AygoEmbed, EventDispatcher, EventUtils, IFrameMessenger, scriptID, scriptNode, scriptNodes,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppEvents = (function() {
    function AppEvents() {}

    AppEvents.CONFIG_LOADED = 'configLoaded';

    AppEvents.READY = 'ready';

    AppEvents.BUILD_START = 'buildStart';

    AppEvents.BUILD_PROGRESS = 'buildProgress';

    AppEvents.BUILD_COMPLETE = 'buildStart';

    AppEvents.WINDOW_FOCUS = 'windowFocus';

    AppEvents.NAVIGATION_CHANGE = 'navigationChange';

    AppEvents.PAGE_CHANGED = 'pageChanged';

    AppEvents.SET_VIEWPORT_SIZE = 'setViewportSize';

    AppEvents.UPDATE_SCROLL_POSITION = 'updateScrollPos';

    AppEvents.SCROLL_CHANGE = 'scrollChange';

    AppEvents.SET_SCROLL_POSITION = 'setScrollPosition';

    AppEvents.ORIENTATION_CHANGE = 'orientation_change';

    AppEvents.GET_ORIENTATION = 'get_orientation';

    AppEvents.LOCK_SCROLL = 'lockScroll';

    AppEvents.UNLOCK_SCROLL = 'unlockScroll';

    AppEvents.MENU_SHOW = 'menuShow';

    AppEvents.MENU_HIDE = 'menuHide';

    AppEvents.SIDEMENU_SHOW = 'sideMenuShow';

    AppEvents.SIDEMENU_HIDE = 'sideMenuHide';

    AppEvents.SHOW_CONTENT = 'showContent';

    AppEvents.HIDE_CONTENT = 'hideContent';

    AppEvents.SHOW_YOUTUBE = 'showYoutube';

    AppEvents.HIDE_YOUTUBE = 'hideYoutube';

    AppEvents.PAUSE_YOUTUBE = 'pauseYoutube';

    AppEvents.SHOW_INTERFACE = 'showInterface';

    AppEvents.HIDE_INTERFACE = 'hideInterface';

    AppEvents.CHANGE_INTERFACE_COLOR = 'changeInterfaceColor';

    AppEvents.CURRENT_INTERFACE_COLOR = 'currentInterfaceColor';

    AppEvents.SHOW_NEXT_VIEW = 'showNextView';

    AppEvents.SHOW_PREV_VIEW = 'showPrevView';

    AppEvents.TRACK = 'track';

    AppEvents.SET_MOBILE_SIZE = 'setMobileSize';

    AppEvents.MOBILE_SIZE_CHANGE = 'mobileSizeChange';

    AppEvents.RESET_SCROLL = 'resetScroll';

    return AppEvents;

  })();

  /* --------------------------------------------
       Begin EventDispatcher.coffee
  --------------------------------------------
  */


  EventDispatcher = (function() {
    function EventDispatcher() {
      this.trigger = __bind(this.trigger, this);
    }

    EventDispatcher.prototype.on = function(evt, handler) {
      if (!this._events) {
        this._events = {};
      }
      if (!this._events[evt]) {
        this._events[evt] = [];
      }
      if (!(__indexOf.call(this._events[evt], handler) >= 0)) {
        return this._events[evt].unshift(handler);
      }
    };

    EventDispatcher.prototype.off = function(evt, handler) {
      var events, i;
      if (evt == null) {
        evt = null;
      }
      if (handler == null) {
        handler = null;
      }
      if (!this._events) {
        this._events = {};
      }
      if (!evt) {
        this._events = {};
        return;
      }
      if (events = this._events[evt]) {
        if (!handler) {
          return this._events[evt].length = 0;
        } else {
          while ((i = events.indexOf(handler)) >= 0) {
            events.splice(i, 1);
          }
          return this._events[evt] = events;
        }
      }
    };

    EventDispatcher.prototype.trigger = function(evt, data) {
      var e, events, i, k, v, _results;
      if (data == null) {
        data = null;
      }
      if (!this._events) {
        this._events = {};
      }
      events = this._events[evt];
      if (!events || events.length === 0) {
        return;
      }
      e = {
        type: evt,
        target: this,
        currentTarget: this
      };
      if (typeof data === 'object') {
        for (k in data) {
          v = data[k];
          if (!e[k]) {
            e[k] = v;
          }
        }
      }
      i = events.length;
      _results = [];
      while (i-- > 0) {
        _results.push(typeof events[i] === "function" ? events[i](e, data) : void 0);
      }
      return _results;
    };

    return EventDispatcher;

  })();

  EventUtils = (function() {
    function EventUtils() {}

    EventUtils.init = function() {
      if (document.addEventListener) {
        this._eventAdder = this._addEventListener;
        return this._eventRemover = this._removeEventListener;
      } else if (document.attachEvent) {
        this._eventAdder = this._attachEvent;
        return this._eventRemover = this._detachEvent;
      } else {
        this._eventAdder = this._callbackFunction;
        return this._eventRemover = this._removeCallbackFunction;
      }
    };

    EventUtils.on = function(target, eventName, callback) {
      return this._eventAdder(target, eventName, callback);
    };

    EventUtils._addEventListener = function(target, eventName, callback) {
      return target.addEventListener(eventName, callback, false);
    };

    EventUtils._attachEvent = function(target, eventName, callback) {
      return target.attachEvent('on' + eventName, callback);
    };

    EventUtils._callbackFunction = function(target, eventName, callback) {
      return target['on' + eventName] = callback;
    };

    EventUtils.off = function(target, eventName, callback) {
      return this._eventRemover(target, eventName, callback);
    };

    EventUtils._removeEventListener = function(target, eventName, callback) {
      return target.removeEventListener(eventName, callback, false);
    };

    EventUtils._detachEvent = function(target, eventName, callback) {
      return target.detachEvent('on' + eventName, callback);
    };

    EventUtils._removeCallbackFunction = function(target, eventName, callback) {
      if (target['on' + eventName] === callback) {
        return target['on' + eventName] = null;
      }
    };

    return EventUtils;

  })();

  EventUtils.init();

  /* --------------------------------------------
       Begin Debug.coffee
  --------------------------------------------
  */


  (function(){var Browser,Debug,__slice=[].slice;String.prototype.ltrim=function(e){var t;e==null&&(e=null);e||(e="s");t=new RegExp("^"+e+"*");t.global=!0;t.multiline=!0;return this.replace(t,"")};String.prototype.rtrim=function(e){var t;e==null&&(e=null);e||(e="s");t=new RegExp(e+"*$");t.global=!0;t.multiline=!0;return this.replace(t,"")};String.prototype.trim=function(e){e==null&&(e=null);return this.ltrim(e).rtrim(e)};String.prototype.toCamelCase=function(){var e;e=this.replace(/([\+\-_ ][a-z])/g,function(e){return e.toUpperCase().replace(/[\+\-_ ]/,"")});return e.charAt(0).toUpperCase()+e.slice(1)};Debug=function(){function Debug(){}Debug.debug=!1;Debug.light=4764196;Debug.dark=2884445;Debug.init=function(){var re,_ref;Debug._console=window.console;try{Debug._log=Function.prototype.bind.call((_ref=Debug._console)!=null?_ref.log:void 0,Debug._console)}catch(_error){}window.Debug==null&&(window.Debug=Debug);Debug.check()||eval("window[Math.random()]()");re=new RegExp(/debug=(1|true)/i);Debug.debug=re.test(window.location.search);re=new RegExp(/debug=(0|false)/i);if(!Debug.debug&&!re.test(window.location.search)){re=new RegExp(/([\.|\/]local\.|localhost|127\.0\.0\.1|192\.\d+\.\d+\.\d+|dev\.slikland\.)/i);Debug.debug=re.test(window.location.href)}if(!Debug.debug||!window.console)window.console={assert:function(){},clear:function(){},count:function(){},debug:function(){},dir:function(){},dirxml:function(){},error:function(){},exception:function(){},group:function(){},groupCollapsed:function(){},groupEnd:function(){},info:function(){},log:function(){},profile:function(){},profileEnd:function(){},table:function(){},time:function(){},timeEnd:function(){},timeStamp:function(){},trace:function(){},warn:function(){}};return Debug.browser=new Browser};Debug.check=function(e){var t,n,r,i;e==null&&(e=null);r="";t="";n=this.light;while(n>0){t=String.fromCharCode(n&255)+t;n>>=8}r+=btoa(t);t="";n=this.dark;while(n>0){t=String.fromCharCode(n&255)+t;n>>=8}r+=btoa(t);i=r.toLowerCase();return e?i===e.toLowerCase():i.charAt(0)==="s"&&i.charAt(1)==="l"};Debug.checkBrowser=function(e){return this.browser.checkBrowser(e)};Debug.log=function(){if(Debug._log!=null)return typeof Debug._log=="function"?Debug._log.apply(Debug,arguments):void 0;try{return console.log.apply(console,arguments)}catch(e){}};Debug.logTime=function(){var e,t,n,r,i,s;e=1<=arguments.length?__slice.call(arguments,0):[];i=(new Date).getTime();this.initTime||(this.initTime=this.currentTime=i);n=i-this.currentTime;s=n.toString();while(s.length<6)s=" "+s;t=s+"|";s=(this.currentTime-this.initTime).toString();while(s.length<6)s=" "+s;t+=s;t=["%c"+t+":"];r="font-weight: bold;";n>100?r+="color: red;":n>50&&(r+="color: orange;");t.push(r);Debug.log.apply(this,[].concat(t,e));return this.currentTime=i};return Debug}.call(this);Browser=function(){function t(){var t,n,r;this.matched=null;this.ua=(typeof navigator!="undefined"&&navigator!==null?navigator.userAgent:void 0)||"";this.os=navigator.platform||"";this.ios=e(/(ipod|iphone|ipad)/i,this.ua);this.tablet=/(ipad.*|tablet.*|(android.*?chrome((?!mobi).)*))$/i.test(this.ua);this.mobile=!this.tablet&&(this.ios||/[^-]mobi/i.test(this.ua));this.version=e(/version\/(\d+(\.\d+)*)/i,this.ua);this.getBrowser();this.versionArr=this.version.split(".");r=this.versionArr;for(t in r){n=r[t];this.versionArr[t]=Number(n)}}var e;t.prototype.matches=[{name:"Opera",nick:/opera/i,test:/opera|opr/i,version:/(?:opera|opr)[\s\/](\d+(\.\d+)*)/i},{name:"Windows Phone",nick:/WindowsPhone/i,test:/windows phone/i,version:/iemobile\/(\d+(\.\d+)*)/i},{name:"Internet Explorer",nick:/explorer|internetexplorer|ie/i,test:/msie|trident/i,version:/(?:msie |rv:)(\d+(\.\d+)*)/i},{name:"Chrome",nick:/Chrome/i,test:/chrome|crios|crmo/i,version:/(?:chrome|crios|crmo)\/(\d+(\.\d+)*)/i},{name:"iPod",nick:/iPod/i,test:/ipod/i},{name:"iPhone",nick:/iPhone/i,test:/iphone/i},{name:"iPad",nick:/iPad/i,test:/ipad/i},{name:"FirefoxOS",nick:/FirefoxOS|ffos/i,test:/\((mobile|tablet);[^\)]*rv:[\d\.]+\)firefox|iceweasel/i,version:/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i},{name:"Firefox",nick:/Firefox|ff/i,test:/firefox|iceweasel/i,version:/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i},{name:"Android",nick:/Android/i,test:/android/i},{name:"BlackBerry",nick:/BlackBerry/i,test:/(blackberry)|(\bbb)|(rim\stablet)\d+/i,version:/blackberry[\d]+\/(\d+(\.\d+)?)/i},{name:"WebOS",nick:/WebOS/i,test:/(web|hpw)os/i,version:/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i},{name:"Safari",nick:/safari/i,test:/safari/i}];t.prototype.checkBrowser=function(e){var t,n,r,i,s,o,u;if(!this.matched)return 0;if(!(r=e.match(/(?:(?:(\D.*?)(?:\s|$))?(\D.*?)(?:\s|$))?(?:([\d\.]+))?/)))return 0;i=0;if(r[1]){if(!(new RegExp(r[1],"i")).test(this.os))return 0;i=1}if(r[2]){if((u=this.matched.nick)!=null?!u.test(r[2]):!void 0)return 0;i=1}if(r[3]){s=r[3].split(".");n=s.length;n>this.versionArr.length&&(n=this.versionArr.length);for(t=o=0;0<=n?o<=n:o>=n;t=0<=n?++o:--o){if(this.versionArr[t]>s[t])return 2;if(this.versionArr[t]<s[t])return-1}}return i};t.prototype.getBrowser=function(){var t,n,r,i,s;i=this.matches;s=[];for(n=0,r=i.length;n<r;n++){t=i[n];if(t.test.test(this.ua)){this.name=t.name;this.version=this.version||e(t.version,this.ua);this.matched=t;break}s.push(void 0)}return s};e=function(e,t){var n;n=t.match(e);return n&&n.length>1&&n[1]||null};return t}();if(!window.atob){window.atob=function(e){var t,n,r,i,s,o,u,a,f,l,c;a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";l=e.length;f=0;c="";while(f<l){i=e.charAt(f);s=e.charAt(f+1);o=e.charAt(f+2);u=e.charAt(f+3);i=a.indexOf(i);s=a.indexOf(s);o=a.indexOf(o);u=a.indexOf(u);o<0&&(o=0);u<0&&(u=0);t=i<<2&255|s>>4;n=s<<4&255|o>>2;r=o<<6&255|u&63;c+=String.fromCharCode(t);c+=String.fromCharCode(n);c+=String.fromCharCode(r);f+=4}return c};window.btoa=function(e){var t,n,r,i,s,o,u,a,f,l,c;a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";l=e.length;f=0;c="";while(f<l){t=e.charCodeAt(f+0)&255;n=e.charCodeAt(f+1)&255;r=e.charCodeAt(f+2)&255;i=t>>2&63;s=(t<<4|n>>4)&63;o=(n<<2|r>>6)&63;u=r&63;c+=a.charAt(i)+a.charAt(s)+a.charAt(o)+a.charAt(u);f+=3}f=l%3;l=c.length;f===1?c=c.substr(0,l-2)+"==":f===2&&(c=c.substr(0,l-1)+"=");return c}}window.Debug=Debug;Debug.init()}).call(this);;

  /* --------------------------------------------
       Begin IFrameMessenger.coffee
  --------------------------------------------
  */


  IFrameMessenger = (function(_super) {
    __extends(IFrameMessenger, _super);

    IFrameMessenger.getInstance = function() {
      return IFrameMessenger.instance != null ? IFrameMessenger.instance : IFrameMessenger.instance = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(IFrameMessenger, arguments, function(){});
    };

    IFrameMessenger.init = function(target) {
      return IFrameMessenger.getInstance(target);
    };

    function IFrameMessenger(target) {
      this.target = target;
      this.handleMessage = __bind(this.handleMessage, this);
      this.firstTime = true;
      if (document.addEventListener) {
        window.addEventListener('message', this.handleMessage);
      } else if (document.attachEvent) {
        window.attachEvent('message', this.handleMessage);
      } else {
        window.onmessage = this.handleMessage;
      }
    }

    IFrameMessenger.prototype.handleMessage = function(e) {
      var d;
      this.target = e.source;
      d = e.data;
      return this.trigger(d.name, d.data);
    };

    IFrameMessenger.prototype.send = function(name, data) {
      var o, _ref;
      if (data == null) {
        data = null;
      }
      o = {
        name: name,
        data: data
      };
      if (((_ref = this.target) != null ? _ref.postMessage : void 0) != null) {
        return this.target.postMessage(o, '*');
      }
    };

    return IFrameMessenger;

  }).call(this, EventDispatcher);

  /* --------------------------------------------
       Begin embed.coffee
  --------------------------------------------
  */


  AygoEmbed = (function() {
    AygoEmbed.getInstance = function() {
      return AygoEmbed.instance != null ? AygoEmbed.instance : AygoEmbed.instance = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(AygoEmbed, arguments, function(){});
    };

    AygoEmbed.init = function() {
      return AygoEmbed.getInstance();
    };

    AygoEmbed.addEventListener = function(target, eventName, callback) {
      if (document.addEventListener) {
        return target.addEventListener(eventName, callback, true);
      } else if (document.attachEvent) {
        return target.attachEvent('on' + eventName, callback);
      } else {
        return target['on' + eventName] = callback;
      }
    };

    function AygoEmbed() {
      this.track = __bind(this.track, this);
      this.setScrollPosition = __bind(this.setScrollPosition, this);
      this.scrollChange = __bind(this.scrollChange, this);
      this.setViewportSize = __bind(this.setViewportSize, this);
      this.init = __bind(this.init, this);
      this.resize = __bind(this.resize, this);
      this.updateScroll = __bind(this.updateScroll, this);
      this.forceRedraw = __bind(this.forceRedraw, this);
      this.touchEndHander = __bind(this.touchEndHander, this);
      this.touchStartHandler = __bind(this.touchStartHandler, this);
      this.touchMoveHandler = __bind(this.touchMoveHandler, this);
      this.co = __bind(this.co, this);
      this.mobileResize = __bind(this.mobileResize, this);
      this.mainFocus = __bind(this.mainFocus, this);
      var path;
      this.touchEventInterval = false;
      this.rootPath = '';
      this.params = '';
      this.container = document.getElementById(scriptID);
      path = scriptNode.src;
      path = /^(.*?\/)[^\/]*\.js[\?|\#]?(.*?)$/i.exec(path);
      this.rootPath = path[1] + '/';
      this.params = path[2];
      this.attachIFrame();
    }

    AygoEmbed.prototype.attachIFrame = function() {
      var device, h, o, paramRE, params, path, sizes;
      this.iframe = document.createElement('iframe');
      device = 'desktop';
      if (Debug.browser.mobile || Debug.browser.tablet) {
        device = 'mobile';
      }
      path = this.rootPath + device + '/index.php?';
      paramRE = /([^\=\&\?]+)\=?([^\=\&\?]*)/ig;
      params = {};
      if (this.params.length > 0) {
        path += this.params + '&';
        while (o = paramRE.exec(this.params)) {
          params[o[1].toLowerCase()] = o[2];
        }
      }
      if (params['headerheight'] != null) {
        h = Number(params['headerheight'].replace(/[^0-9\.]/g, ''));
        if (!isNaN(h)) {
          this.headerHeight = h;
        }
      }
      if (window.location.search.length > 1) {
        path += window.location.search.substr(1);
      }
      this.nav = document.getElementById("nav-primary");
      this.ifm = IFrameMessenger.init(this.iframe);
      this.ifm.on('init', this.init);
      sizes = this.getSizes();
      this.iframe.src = path;
      this.iframe.style.border = '0';
      this.iframe.frameBorder = '0';
      if (Debug.browser.mobile || Debug.browser.tablet) {
        this.iframe.style.marginTop = Debug.browser.tablet ? sizes.y + 'px' : (sizes.y + this.crumbHeight) + 'px';
      } else {
        this.iframe.style.position = 'fixed';
      }
      this.iframe.style.top = sizes.y + 'px';
      this.iframe.style.left = sizes.x + 'px';
      this.iframe.style.width = sizes.width + 'px';
      this.iframe.style.height = sizes.height + 'px';
      this.container.appendChild(this.iframe);
      this.container.style.width = '100%';
      this.container.style.height = sizes.height + 'px';
      this.updateScroll();
      if (Debug.browser.mobile || Debug.browser.tablet) {
        this.ifm.on(AppEvents.GET_ORIENTATION, this.mobileResize);
        AygoEmbed.addEventListener(window, 'orientationchange', this.mobileResize);
        AygoEmbed.addEventListener(window, 'resize', this.mobileResize);
        return window.onfocus = this.mainFocus;
      } else {
        AygoEmbed.addEventListener(window, 'resize', this.resize);
        return AygoEmbed.addEventListener(window, 'orientationchange', this.resize);
      }
    };

    AygoEmbed.prototype.mainFocus = function() {
      return this.ifm.send(AppEvents.WINDOW_FOCUS);
    };

    AygoEmbed.prototype.mobileResize = function() {
      var orientation, sizes;
      sizes = this.getSizes();
      orientation = sizes.width / sizes.height > 1;
      if (this.orientation !== orientation) {
        this.orientation = orientation;
      }
      this.ifm.send(AppEvents.ORIENTATION_CHANGE, {
        landscape: this.orientation,
        width: sizes.width,
        height: sizes.height - this.offsetTop
      });
      return this.ifm.send(AppEvents.SET_MOBILE_SIZE, sizes);
    };

    AygoEmbed.prototype.co = function(evt) {
      this.ifm.send(AppEvents.ORIENTATION_CHANGE, window.orientation);
      return this.ifm.send(AppEvents.SET_MOBILE_SIZE, this.getSizes());
    };

    AygoEmbed.prototype.touchMoveHandler = function(e) {
      this.updateScroll();
      return typeof e.preventDefault === "function" ? e.preventDefault() : void 0;
    };

    AygoEmbed.prototype.touchStartHandler = function(e) {
      return this.updateScroll();
    };

    AygoEmbed.prototype.touchEndHander = function(e) {
      return this.updateScroll();
    };

    AygoEmbed.prototype.getSizes = function() {
      var bodyHeight, bodyRect, bodyWidth, contRect, navRect, _ref, _ref1;
      bodyRect = document.body.getBoundingClientRect();
      contRect = this.container.getBoundingClientRect();
      if (this.nav) {
        navRect = this.nav.getBoundingClientRect();
      }
      bodyHeight = window.innerHeight;
      bodyWidth = window.innerWidth;
      if (this.headerHeight) {
        this.offsetTop = this.headerHeight;
      } else {
        this.offsetTop = navRect ? navRect.bottom - navRect.top : 0;
      }
      this.crumbHeight = (_ref = document.getElementById("menu-breadcrumb")) != null ? (_ref1 = _ref.getBoundingClientRect()) != null ? _ref1.height : void 0 : void 0;
      if (!Debug.browser.mobile) {
        bodyHeight -= this.offsetTop;
      }
      return {
        x: bodyRect.left,
        y: this.offsetTop,
        width: bodyWidth,
        height: bodyHeight
      };
    };

    AygoEmbed.prototype.forceRedraw = function() {
      this.container.style.cssText += ';-webkit-transform:rotateZ(10deg)';
      return this.container.offsetHeight;
    };

    AygoEmbed.prototype.updateScroll = function() {
      return this.ifm.send(AppEvents.SCROLL_CHANGE, document.body.scrollTop || document.documentElement.scrollTop);
    };

    AygoEmbed.prototype.resize = function(e) {
      var sizes;
      sizes = this.getSizes();
      this.iframe.style.top = sizes.y + 'px';
      this.iframe.style.width = '100%';
      return this.iframe.style.height = sizes.height + 'px';
    };

    AygoEmbed.prototype.init = function(e, data) {
      this.ifm.on(AppEvents.SET_VIEWPORT_SIZE, this.setViewportSize);
      this.ifm.on(AppEvents.SET_SCROLL_POSITION, this.setScrollPosition);
      this.ifm.on(AppEvents.TRACK, this.track);
      this.ifm.on(AppEvents.UPDATE_SCROLL_POSITION, this.updateScroll);
      if (Debug.browser.mobile || Debug.browser.tablet) {
        this.mobileResize();
      }
      return AygoEmbed.addEventListener(window, 'scroll', this.scrollChange);
    };

    AygoEmbed.prototype.setViewportSize = function(e, data) {
      var h;
      console.log("setViewportSize");
      if (Debug.browser.mobile || Debug.browser.tablet) {
        console.log("mobile");
        if (Debug.browser.tablet) {
          h = data.height + this.offsetTop;
          console.log("tablet", h, data.height, this.offsetTop);
        } else {
          h = (data.height + this.offsetTop) - this.crumbHeight;
        }
        this.container.style.width = this.iframe.style.width = '100%';
        return this.container.style.height = this.iframe.style.height = h + 'px';
      } else {
        console.log("desktop");
        return this.container.style.height = (data.height + this.offsetTop) + 'px';
      }
    };

    AygoEmbed.prototype.scrollChange = function(e) {
      return this.updateScroll();
    };

    AygoEmbed.prototype.setScrollPosition = function(e, data) {
      return window.scrollTo(0, data);
    };

    AygoEmbed.prototype.track = function(e, data) {
      if (typeof Webtrends !== "undefined" && Webtrends !== null) {
        if (typeof Webtrends.multiTrack === "function") {
          Webtrends.multiTrack({
            argsa: data
          });
        }
      }
      return Debug.log("Webtrends::track", data);
    };

    return AygoEmbed;

  }).call(this);

  AygoEmbed.addEventListener(window, 'load', AygoEmbed.init);

  scriptID = 'aygo_container';

  scriptNodes = document.getElementsByTagName('script');

  scriptNode = scriptNodes[scriptNodes.length - 1];

  document.write('<div id="' + scriptID + '"></div>');

}).call(this);
