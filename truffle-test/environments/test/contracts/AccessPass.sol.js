// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"registrantsPaid","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"accessPassName","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":true,"inputs":[],"name":"organizer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"refundTicket","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"newquota","type":"uint256"}],"name":"changeQuota","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"quota","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"numRegistrants","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"buyTicket","outputs":[{"name":"success","type":"bool"}],"type":"function"},{"inputs":[{"name":"inAccessPassName","type":"string"},{"name":"inQuota","type":"uint256"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_from","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_to","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Refund","type":"event"}],
    binary: "606060405260405161049f38038061049f83398101604052805160805191019060605160008054600160a060020a0319163317815583516002805492819052926020601f600019600186161561010002019094168590048401047f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101939091608001908390106100db57805160ff19168380011785555b506100b49291505b8082111561010b57600081556001016100a0565b505080600460005081905550600060036000508190555050506103908061010f6000396000f35b82800160010185558215610098579182015b828111156100985782518260005055916020019190600101906100ed565b509056606060405236156100775760e060020a600035046313381fbf811461007957806346a226d81461009157806361203265146100ea578063705099b9146100fc57806383197ef014610128578063a977c71e14610152578063cebe09c914610175578063ec3a6f731461017e578063edca914c14610187575b005b61019e60043560016020526000908152604090205481565b6101a8600280546020601f600183161561010002600019019092168390049182018190040260809081016040526060828152929190828280156102555780601f1061022a57610100808354040283529160200191610255565b61019e600054600160a060020a031681565b610216600435602435600080548190600160a060020a0390811633919091161461025d575b5092915050565b610077600054600160a060020a039081163391909116141561032857600054600160a060020a0316ff5b610077600435600054600160a060020a0390811633919091161461032a57610330565b61019e60045481565b61019e60035481565b61021660045460035460009190106103335761038d565b6060908152602090f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080519115158252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161023857829003601f168201915b505050505081565b600160a060020a038416815260016020526040812054831415610121575030600160a060020a0381163183901061012157600160a060020a0384168284606082818181858883f1505060408051938452602084019190915280517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d938190039091019150a160006001600050600086600160a060020a031681526020019081526020016000206000508190555060036000818150548092919060019003919050555060019150610121565b565b60048190555b50565b600160a060020a03331680825260016020819052604080842034908190556003805490930190925560609283526080919091527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c91a15060015b9056",
    unlinked_binary: "606060405260405161049f38038061049f83398101604052805160805191019060605160008054600160a060020a0319163317815583516002805492819052926020601f600019600186161561010002019094168590048401047f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101939091608001908390106100db57805160ff19168380011785555b506100b49291505b8082111561010b57600081556001016100a0565b505080600460005081905550600060036000508190555050506103908061010f6000396000f35b82800160010185558215610098579182015b828111156100985782518260005055916020019190600101906100ed565b509056606060405236156100775760e060020a600035046313381fbf811461007957806346a226d81461009157806361203265146100ea578063705099b9146100fc57806383197ef014610128578063a977c71e14610152578063cebe09c914610175578063ec3a6f731461017e578063edca914c14610187575b005b61019e60043560016020526000908152604090205481565b6101a8600280546020601f600183161561010002600019019092168390049182018190040260809081016040526060828152929190828280156102555780601f1061022a57610100808354040283529160200191610255565b61019e600054600160a060020a031681565b610216600435602435600080548190600160a060020a0390811633919091161461025d575b5092915050565b610077600054600160a060020a039081163391909116141561032857600054600160a060020a0316ff5b610077600435600054600160a060020a0390811633919091161461032a57610330565b61019e60045481565b61019e60035481565b61021660045460035460009190106103335761038d565b6060908152602090f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080519115158252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161023857829003601f168201915b505050505081565b600160a060020a038416815260016020526040812054831415610121575030600160a060020a0381163183901061012157600160a060020a0384168284606082818181858883f1505060408051938452602084019190915280517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d938190039091019150a160006001600050600086600160a060020a031681526020019081526020016000206000508190555060036000818150548092919060019003919050555060019150610121565b565b60048190555b50565b600160a060020a03331680825260016020819052604080842034908190556003805490930190925560609283526080919091527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c91a15060015b9056",
    address: "0x572bd8424d2de3330e70983b912521c3bd86cf36",
    generated_with: "2.0.9",
    contract_name: "AccessPass"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("AccessPass error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("AccessPass error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("AccessPass error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("AccessPass error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.AccessPass = Contract;
  }

})();
